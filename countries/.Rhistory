getwd()
# Convert the path to use forward slashes
fixed_path <- gsub("\\\\", "/",
"C:\Users\F0738707\OneDrive - Banco do Brasil S.A\_macro\atividades\reuniao-mensal\plots")
# Convert the path to use forward slashes
fixed_path <- gsub("\\\\", "/",
"C:\Users")
# Convert the path to use forward slashes
fixed_path <- gsub("\\\\", "/",
"C:\\Users")
# Convert the path to use forward slashes
fixed_path <- gsub("\\\", "/",
"C:\Users")
# Convert the path to use forward slashes
fixed_path <- gsub("\\", "/",
"C:\Users")
# Convert the path to use forward slashes
fixed_path <- gsub("\", "/",
"C:\Users")
# Convert the path to use forward slashes
fixed_path <- gsub("\", "/",
"C:\Users")
getwd()
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_macro/atividades/reuniao-mensal/graficos.R")
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_macro/atividades/reuniao-mensal/graficos.R")
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_macro/atividades/reuniao-mensal/graficos.R")
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
View(counties)
View(countries)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
View(countries)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
View(countries)
packages <- c(
"beepr", "rvest", "tidyverse", "readxl", "writexl", "ISOcodes", "stringr"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
write_xlsx(countries, path = "countries.xlsx")
View(countries)
str(countries)
load("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.rdata")
View(countries)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
source("C:/Users/F0738707/OneDrive - Banco do Brasil S.A/_myRtools/countries/countries.R", echo=TRUE)
packages <- c(
"beepr", "rvest", "tidyverse", "readxl", "writexl", "ISOcodes", "stringr"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
# Get the ISO 3166 country codes
countries <- ISO_3166_1
# View the first few rows of the country codes data frame
head(countries)
# Define the URL of the site
url <- "https://lingualid.com/countries-and-nationalities-in-brazilian-portuguese/"
# Read the HTML content of the page
webpage <- read_html(url)
# Read the HTML content of the page
webpage <- read_html(url)
# Define the URL of the site
url <- "https://lingualid.com/countries-and-nationalities-in-brazilian-portuguese/"
# Read the HTML content of the page
webpage <- read_html(url)
packages <- c(
"beepr", "rvest", "tidyverse", "readxl", "writexl", "ISOcodes", "stringr"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
packages <- c(
"conflicted",
"beepr",
"rvest",
"tidyverse",
"readxl",
"writexl",
"ISOcodes",
"stringr"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
# Get the ISO 3166 country codes
countries <- ISO_3166_1
# View the first few rows of the country codes data frame
head(countries)
# Define the URL of the site
url <- "https://lingualid.com/countries-and-nationalities-in-brazilian-portuguese/"
# Read the HTML content of the page
webpage <- read_html(url)
# Extract the table rows containing country names
table_rows <- webpage %>%
html_nodes("table tr")
# Extract the text from each row
countries1 <- table_rows %>%
html_nodes("td") %>%
html_text(trim = TRUE)
# Clean and format the country names
countries1 <- matrix(countries1, ncol = 4, byrow = TRUE) %>%
as.data.frame(stringsAsFactors = FALSE)
# Assign column names from the first row and remove the first row
colnames(countries1) <- countries1[1, ]
countries1 <- countries1[-1, ]
colnames(countries1)
# Remove rows with NA values and rows with empty strings
countries12 <- countries1 %>% drop_na() %>% filter_all(all_vars(. != "")) %>%
rename(
Country_EN = "Country",
Country_PT = "Country (Portuguese)",
Nationality_PT_male = "Nationality in Portuguese (masculine)",
Nationality_PT_female = "Nationality in Portuguese (feminine)"
)
# Create a dataframe mapping Alpha-3 codes to English country names (for merging)
country_code_map <- countries %>%
select(Alpha_3, Name) %>%
setNames(c("Alpha_3", "Country_EN"))
# Merge the countries1 dataframe with the country_code_map
countries_translated <- country_code_map %>%
left_join(countries12, by = "Country_EN")
# Add the Country_Portuguese column to the original countries dataframe
countries <- countries %>%
left_join(countries_translated %>%
select(colnames(countries_translated)), by = "Alpha_3")
# View the first few rows of the updated countries dataframe
head(countries)
# View the first few rows of the updated countries dataframe
View(countries)
countries1_PT = countries %>% filter(is.na(Country_PT))
glimpse(countries1_PT)
countries1_PT = countries %>% filter(is.na(Country_PT))
conflicts_prefer(dplyr::filter)
# View the first few rows of the updated countries dataframe
View(countries)
countries1_PT = countries %>% filter(is.na(Country_PT))
countries1_PT = countries %>% filter(is.na(Country_PT))
glimpse(countries1_PT)
translations <- c(
"Aruba", "Anguilla", "Ilhas Åland", "Samoa Americana", "Antártica",
"Territórios Franceses do Sul", "Bonaire, Santo Eustáquio e Saba",
"Bahamas", "São Bartolomeu", "Bermudas", "Bolívia",
"Brunei Darussalam", "Ilha Bouvet", "Ilhas Cocos (Keeling)", "Costa do Marfim",
"Congo, República Democrática do", "Ilhas Cook", "Curaçao", "Ilha Christmas",
"Ilhas Cayman", "República Tcheca", "República Dominicana", "Saara Ocidental",
"Ilhas Malvinas", "Ilhas Faroé", "Guernsey", "Gibraltar", "Guadalupe",
"Gâmbia", "Groenlândia", "Guiana Francesa", "Guam", "Hong Kong",
"Ilha Heard e Ilhas McDonald", "Ilha de Man", "Território Britânico do Oceano Índico",
"Irã", "Israel", "Jersey", "Coreia do Sul",
"Laos", "Macau", "São Martinho (parte Francesa)",
"Moldávia", "Mianmar", "Ilhas Marianas do Norte", "Montserrat",
"Martinica", "Mayotte", "Nova Caledônia", "Ilha Norfolk", "Niue", "Pitcairn",
"Porto Rico", "Coreia do Norte", "Palestina",
"Polinésia Francesa", "Reunião", "Federação Russa", "Geórgia do Sul e Ilhas Sandwich do Sul",
"Santa Helena, Ascensão e Tristão da Cunha", "Svalbard e Jan Mayen", "São Pedro e Miquelon",
"Sudão do Sul", "São Martinho (parte Holandesa)", "Síria",
"Ilhas Turcas e Caicos", "Tokelau", "Timor-Leste", "Turquia", "Taiwan",
"Tanzânia", "Ilhas Menores Distantes dos Estados Unidos",
"Santa Sé (Estado da Cidade do Vaticano)", "Venezuela",
"Ilhas Virgens Britânicas", "Ilhas Virgens Americanas", "Vietnã", "Wallis e Futuna"
)
# Add the translations to the dataframe
countries1_PT$Country_PT <- translations
# View the updated dataframe
head(countries1_PT)
# Merge the updated dataframe with countries
countries <- countries %>%
left_join(countries1_PT %>% select(Alpha_3, Country_PT), by = "Alpha_3") %>%
mutate(Country_PT = coalesce(Country_PT.x, Country_PT.y)) %>%
select(-Country_PT.x, -Country_PT.y)
# View the first few rows of the updated countries dataframe
colnames(countries)
countries <- countries %>%
select(Alpha_2, Alpha_3, Numeric, Country_EN, Country_PT, everything())
# Visualize as primeiras linhas do dataframe reordenado
head(countries)
write_xlsx(countries, path = "countries.xlsx")
save(countries, "countries.rdata")
write_xlsx(countries, path = "countries.xlsx")
save(countries, "countries.rdata")
save(countries, file = "countries.rdata")
load("countries.rdata")
View(countries)
beep(sound = "coin")
str(countries)
# codes to numeric:
countries$Numeric = as.numeric(countries$Numeric)
str(countries)
View(countries)
load("countries.rdata")
View(countries)
# codes to numeric:
countries$num = as.numeric(countries$Numeric)
