# View the first few rows of the updated countries dataframe
View(countries)
countries1_PT = countries %>% filter(is.na(Country_PT))
countries1_PT = countries %>% filter(is.na(Country_PT))
glimpse(countries1_PT)
translations <- c(
"Aruba", "Anguilla", "Ilhas Åland", "Samoa Americana", "Antártica",
"Territórios Franceses do Sul", "Bonaire, Santo Eustáquio e Saba",
"Bahamas", "São Bartolomeu", "Bermudas", "Bolívia",
"Brunei Darussalam", "Ilha Bouvet", "Ilhas Cocos (Keeling)", "Costa do Marfim",
"Congo, República Democrática do", "Ilhas Cook", "Curaçao", "Ilha Christmas",
"Ilhas Cayman", "República Tcheca", "República Dominicana", "Saara Ocidental",
"Ilhas Malvinas", "Ilhas Faroé", "Guernsey", "Gibraltar", "Guadalupe",
"Gâmbia", "Groenlândia", "Guiana Francesa", "Guam", "Hong Kong",
"Ilha Heard e Ilhas McDonald", "Ilha de Man", "Território Britânico do Oceano Índico",
"Irã", "Israel", "Jersey", "Coreia do Sul",
"Laos", "Macau", "São Martinho (parte Francesa)",
"Moldávia", "Mianmar", "Ilhas Marianas do Norte", "Montserrat",
"Martinica", "Mayotte", "Nova Caledônia", "Ilha Norfolk", "Niue", "Pitcairn",
"Porto Rico", "Coreia do Norte", "Palestina",
"Polinésia Francesa", "Reunião", "Federação Russa", "Geórgia do Sul e Ilhas Sandwich do Sul",
"Santa Helena, Ascensão e Tristão da Cunha", "Svalbard e Jan Mayen", "São Pedro e Miquelon",
"Sudão do Sul", "São Martinho (parte Holandesa)", "Síria",
"Ilhas Turcas e Caicos", "Tokelau", "Timor-Leste", "Turquia", "Taiwan",
"Tanzânia", "Ilhas Menores Distantes dos Estados Unidos",
"Santa Sé (Estado da Cidade do Vaticano)", "Venezuela",
"Ilhas Virgens Britânicas", "Ilhas Virgens Americanas", "Vietnã", "Wallis e Futuna"
)
# Add the translations to the dataframe
countries1_PT$Country_PT <- translations
# View the updated dataframe
head(countries1_PT)
# Merge the updated dataframe with countries
countries <- countries %>%
left_join(countries1_PT %>% select(Alpha_3, Country_PT), by = "Alpha_3") %>%
mutate(Country_PT = coalesce(Country_PT.x, Country_PT.y)) %>%
select(-Country_PT.x, -Country_PT.y)
# View the first few rows of the updated countries dataframe
colnames(countries)
countries <- countries %>%
select(Alpha_2, Alpha_3, Numeric, Country_EN, Country_PT, everything())
# Visualize as primeiras linhas do dataframe reordenado
head(countries)
write_xlsx(countries, path = "countries.xlsx")
save(countries, "countries.rdata")
write_xlsx(countries, path = "countries.xlsx")
save(countries, "countries.rdata")
save(countries, file = "countries.rdata")
load("countries.rdata")
View(countries)
beep(sound = "coin")
str(countries)
# codes to numeric:
countries$Numeric = as.numeric(countries$Numeric)
str(countries)
View(countries)
load("countries.rdata")
View(countries)
# codes to numeric:
countries$num = as.numeric(countries$Numeric)
packages <- c(
"conflicted",
"beepr",
"rvest",
"tidyverse",
"readxl",
"writexl",
"ISOcodes",
"stringr"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
conflicts_prefer(dplyr::filter)
# Get the ISO 3166 country codes
countries <- ISO_3166_1
# Get the ISO 3166 country codes
countries <- ISO_3166_1
# View the first few rows of the country codes data frame
head(countries)
packages <- c(
"conflicted",
"beepr",
"rvest",
"tidyverse",
"readxl",
"writexl",
"ISOcodes",
"stringr",
"countries"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
# Merge country data with another dataset
data <- data.frame(
country = c("USA", "DEU", "JPN"),
value = c(100, 200, 300)
)
merged_data <- merge_with_country(data, country_column = "country")
# Create a quick world map
world_map <- create_world_map()
source("~/.active-rstudio-document", echo=TRUE)
country_info(USA)
country_info(US)
View(countries)
country_info(USA)
country_info(US)
country_info(840)
country_info(
countries = c(840)
)
country_info(
countries = c(US)
)
country_info(
countries = c("US")
)
country_info(
countries = c("USA")
)
country_info(
countries = c("USA")
)
list_fields()
packages <- c(
"httr",
"jsonlite"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
conflicts_prefer(dplyr::filter)
list_fields()
country_info(
countries = c("USA")
)
# Fetch the JSON data from the URL
url <- "https://restcountries.com/v3.1/all"
response <- GET(url)
content <- content(response, "text", encoding = "UTF-8")
# Fetch the JSON data from the URL
url <- "https://restcountries.com/v3.1/all"
response <- GET(url)
# Fetch the JSON data from the URL
url <- "https://restcountries.com/v3.1/all"
countries_data <- fromJSON(url, flatten = TRUE)
# Set the path to the downloaded file
file_path <- "all.json"
# Read the JSON file into R
countries_data <- fromJSON(file_path, flatten = TRUE)
# Convert to a dataframe
countries_df <- as.data.frame(countries_data)
# Print the first few rows of the dataframe
head(countries_df)
View(countries_df)
colnames(countries_df)
# Fetch the JSON data from the URL
url <- "https://restcountries.com/v3.1/all"
countries_data <- fromJSON(url, flatten = TRUE)
world
packages <- c(
"httr",
"jsonlite",
"maps",
"ggplot2"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
packages <- c(
"httr",
"jsonlite",
"countries",
"ggplot2"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
# Get the world map data
world_map <- map_data("world")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude")
# Get the world map data
world_map <- map_data("world")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "darkgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "darkblue") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "grey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "grey40") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "grey80") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "white") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "white") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(panel.background = element_rect(fill = "lightgrey")) # Paint water masses
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "white") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(panel.background = element_rect(fill = "grey90")) # Paint water masses
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "white") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(panel.background = element_rect(fill = "grey95")) # Paint water masses
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "white") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "grey90"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "white") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "grey95"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
source("~/.active-rstudio-document", echo=TRUE)
# Get the world map data
world_map <- map_data("world")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "white") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "aliceblue"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "beige", color = "white") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "aliceblue"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "beige", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "aliceblue"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "grey90", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "aliceblue"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "grey95", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "aliceblue"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "aliceblue"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Get the world map data
world_map <- map_data("world")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "lightskyblue"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "lightskyblue1"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "skyblue"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "skyblue1"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "lightblue1"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "lightgrey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "lightblue"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "grey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "lightblue"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
View(world_map)
# Get the world map data
world_map <- map_data("world")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "grey") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "#B6DCF3"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "grey50") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "#B6DCF3"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "grey50") +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "lightblue2"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "grey50", size = 0.3) +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "lightblue2"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "grey50", linewidth = 0.3) +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "lightblue2"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "grey50", linewidth = 0.1) +
theme_minimal() +
labs(title = "World Map", x = "Longitude", y = "Latitude") +
theme(
panel.background = element_rect(fill = "lightblue2"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "grey50", linewidth = 0.1) +
theme_minimal() +
labs(title = NULL, x = NULL, y = NULL) +
theme(
panel.background = element_rect(fill = "lightblue2"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
list_fields()
packages <- c(
"httr",
"jsonlite",
"countries",
"ggplot2"
)
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, method = "wininet")
}
library(pkg, character.only = TRUE)
}
conflicts_prefer(dplyr::filter)
list_fields()
country_info(
countries = c("USA")
)
# Fetch the JSON data from the URL
url <- "https://restcountries.com/v3.1/all"
countries_data <- fromJSON(url, flatten = TRUE)
# Convert to a dataframe
countries_df <- as.data.frame(countries_data)
# Print the first few rows of the dataframe
head(countries_df)
View(countries_df)
# Get the world map data
world_map <- map_data("world")
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "grey50", linewidth = 0.1) +
theme_minimal() +
labs(title = NULL, x = NULL, y = NULL) +
theme(
panel.background = element_rect(fill = "lightblue2"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
View(data)
# Get the world map data
world_map <- map_data("world")
View(world_map)
# Plot the world map using ggplot2
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "grey50", linewidth = 0.1) +
theme_minimal() +
labs(title = NULL, x = NULL, y = NULL) +
theme(
panel.background = element_rect(fill = "lightblue2"), # Paint water masses
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank()) # Remove minor grid lines
